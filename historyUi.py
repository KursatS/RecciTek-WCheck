#!/usr/bin/env python3

import logging
import json
import csv
import os
from datetime import datetime
from pathlib import Path

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QColor
from PyQt6.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout, QFrame, QGraphicsDropShadowEffect,
    QListWidget, QListWidgetItem, QScrollArea, QTextEdit
)

logging.basicConfig(
    level=logging.INFO,
    filename=str(Path.home() / "garanti.log"),
    filemode="a",
    format="%(asctime)s [%(levelname)s] %(message)s",
)
logger = logging.getLogger("garanti")

def log_info(msg: str):
    logger.info(msg)

def log_exc(msg: str):
    logger.exception(msg)


class HistoryPopup(QWidget):
    """Ge√ßmi≈ü sorgular i√ßin basit ve stabil pencere"""
    def __init__(self, parent=None):
        super().__init__(parent)

        # Basit pencere ayarlarƒ± - crash riski olmadan
        self.setWindowTitle("Ge√ßmi≈ü Sorgular")
        self.setFixedSize(700, 500)
        self.setWindowFlags(Qt.WindowType.Window)

        # Roborock logosunu ayarla
        try:
            if os.path.exists("logo.png"):
                self.setWindowIcon(QtGui.QIcon("logo.png"))
            elif os.path.exists("logo.ico"):
                self.setWindowIcon(QtGui.QIcon("logo.ico"))
        except:
            pass  # Logo y√ºklenemezse devam et

        # Ana layout
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(10)

        # Ba≈ülƒ±k
        title = QLabel("GE√áMƒ∞≈û SORGULAR")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("font-size: 16px; font-weight: bold; color: #333;")
        main_layout.addWidget(title)

        # ƒ∞statistikler
        self.stats_label = QLabel("")
        self.stats_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.stats_label.setStyleSheet("font-size: 12px; color: #666; padding: 5px;")
        main_layout.addWidget(self.stats_label)

        # Liste i√ßin scroll area
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)

        # Liste widget'ƒ±
        self.list_widget = QWidget()
        self.list_layout = QVBoxLayout(self.list_widget)
        self.list_layout.setContentsMargins(5, 5, 5, 5)
        self.list_layout.setSpacing(2)
        self.list_layout.setAlignment(Qt.AlignmentFlag.AlignTop)

        scroll_area.setWidget(self.list_widget)
        main_layout.addWidget(scroll_area)

        # Filtreleme butonlarƒ±
        filter_layout = QHBoxLayout()
        filter_layout.setSpacing(10)

        # Hepsini g√∂ster butonu
        self.show_all_btn = QPushButton("üîç Hepsini G√∂ster")
        self.show_all_btn.clicked.connect(lambda: self.filter_devices("all"))
        self.show_all_btn.setStyleSheet("""
            QPushButton {
                background-color: #094771;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #0a5a8a;
            }
        """)
        filter_layout.addWidget(self.show_all_btn)

        # Not alƒ±nanlarƒ± g√∂ster butonu
        self.show_notes_btn = QPushButton("üìù Not Alƒ±nanlarƒ± G√∂ster")
        self.show_notes_btn.clicked.connect(lambda: self.filter_devices("notes"))
        self.show_notes_btn.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #218838;
            }
        """)
        filter_layout.addWidget(self.show_notes_btn)

        filter_layout.addStretch()
        main_layout.addLayout(filter_layout)

        # Butonlar
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(10)

        # CSV dƒ±≈üa aktar butonu
        self.export_btn = QPushButton("üìä CSV Dƒ±≈üa Aktar")
        self.export_btn.clicked.connect(self.export_to_csv)
        buttons_layout.addWidget(self.export_btn)

        # Kapat butonu
        close_btn = QPushButton("Kapat")
        close_btn.clicked.connect(self.close_popup)
        buttons_layout.addWidget(close_btn)

        buttons_layout.addStretch()
        main_layout.addLayout(buttons_layout)

        # Ge√ßmi≈ü verileri
        self.history_data = []
        self.all_items = []  # T√ºm √∂ƒüeler i√ßin
        self.notes_file = "device_notes.json"
        self.device_notes = self.load_notes()

    def load_history(self):
        """Ge√ßmi≈ü verilerini y√ºkle ve g√∂ster"""
        try:
            cache_file = "warranty_cache.json"
            if os.path.exists(cache_file):
                with open(cache_file, 'r', encoding='utf-8') as f:
                    cache_data = json.load(f)

                # Verileri tarihe g√∂re sƒ±rala (en yeni √ºstte)
                sorted_data = sorted(cache_data.items(),
                                   key=lambda x: x[1]['timestamp'],
                                   reverse=True)

                self.history_data = []
                total_queries = 0
                recci_warranty = 0
                kvk_warranty = 0
                no_warranty = 0

                # Mevcut list widget'larƒ±nƒ± temizle
                for i in reversed(range(self.list_layout.count())):
                    widget = self.list_layout.itemAt(i).widget()
                    if widget:
                        widget.setParent(None)

                for serial, data in sorted_data:
                    total_queries += 1
                    result = data['result']
                    timestamp = datetime.fromisoformat(data['timestamp'])

                    # ƒ∞statistik hesapla
                    if result.get('status_color') == 'green':
                        recci_warranty += 1
                    elif result.get('status_color') == 'blue':
                        kvk_warranty += 1
                    else:
                        no_warranty += 1

                    # Model bilgisini hazƒ±rla
                    model_info = result.get('copy_model_payload', '')
                    if not model_info or model_info.strip() == '':
                        model_info = 'MODEL ƒ∞SMƒ∞ BULUNAMADI'
                    else:
                        # "Sonic" kelimesini √ßƒ±kar (√∂rn: "S8 Sonic" ‚Üí "S8")
                        import re
                        model_info = re.sub(r'\s+Sonic\s*', ' ', model_info, flags=re.IGNORECASE)
                        model_info = model_info.strip()

                    # History item olu≈ütur
                    item_widget = self.create_history_item(serial, result, timestamp, model_info)
                    self.list_layout.addWidget(item_widget)

                    # √ñƒüeyi all_items listesine ekle
                    self.all_items.append({
                        'widget': item_widget,
                        'serial': serial
                    })

                    # Durum metnini hazƒ±rla
                    status_color = result.get('status_color', '')
                    if status_color == 'green':
                        status_text = 'RECCI GARANTƒ∞Lƒ∞'
                    elif status_color == 'blue':
                        status_text = 'KVK GARANTƒ∞Lƒ∞'
                    else:
                        status_text = 'GARANTƒ∞ DI≈ûI'

                    # CSV i√ßin veri hazƒ±rla
                    self.history_data.append({
                        'serial': serial,
                        'model': model_info,
                        'color': status_text,
                        'timestamp': timestamp.strftime('%Y-%m-%d %H:%M:%S')
                    })

                # ƒ∞statistikleri g√ºncelle
                self.stats_label.setText(
                    f"Toplam: {total_queries} | Recci Garantili: {recci_warranty} | "
                    f"KVK Garantili: {kvk_warranty} | Garanti Dƒ±≈üƒ±: {no_warranty}"
                )

                # Bo≈üluk ekle
                self.list_layout.addStretch()

            else:
                self.stats_label.setText("Hen√ºz sorgu ge√ßmi≈üi bulunmuyor.")
                self.export_btn.setVisible(False)

        except Exception as e:
            log_exc(f"History load error: {e}")
            self.stats_label.setText("Ge√ßmi≈ü y√ºklenirken hata olu≈ütu.")

    def create_history_item(self, serial, result, timestamp, model_info):
        """Tek bir ge√ßmi≈ü √∂ƒüesi olu≈ütur"""
        item_frame = QFrame()
        item_frame.setStyleSheet("""
            QFrame {
                background-color: rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                padding: 8px;
                margin: 2px 0px;
            }
        """)

        layout = QVBoxLayout(item_frame)
        layout.setContentsMargins(10, 5, 10, 5)

        # √úst satƒ±r: Seri numarasƒ± ve durum
        top_layout = QHBoxLayout()

        # Seri numarasƒ±
        serial_label = QLabel(f"Seri: {serial}")
        serial_label.setStyleSheet("""
            QLabel {
                color: white;
                font-size: 12px;
                font-weight: bold;
                font-family: 'JetBrains Mono', monospace;
            }
        """)
        top_layout.addWidget(serial_label)

        # Durum g√∂stergesi
        status_color = result.get('status_color', 'red')
        if status_color == 'green':
            status_text = "RECCI"
            bg_color = "rgba(34, 197, 94, 0.8)"
        elif status_color == 'blue':
            status_text = "KVK"
            bg_color = "rgba(59, 130, 246, 0.8)"
        else:
            status_text = "DI≈ûI"
            bg_color = "rgba(239, 68, 68, 0.8)"

        status_label = QLabel(status_text)
        status_label.setStyleSheet(f"""
            QLabel {{
                background-color: {bg_color};
                color: white;
                font-size: 10px;
                font-weight: bold;
                padding: 2px 6px;
                border-radius: 4px;
                font-family: 'JetBrains Mono', monospace;
            }}
        """)
        top_layout.addWidget(status_label)

        # Zaman (Tarih ve Saat)
        time_label = QLabel(timestamp.strftime('%d.%m.%Y %H:%M:%S'))
        time_label.setStyleSheet("""
            QLabel {
                color: rgba(255, 255, 255, 0.7);
                font-size: 10px;
                font-family: 'JetBrains Mono', monospace;
            }
        """)
        top_layout.addWidget(time_label)

        top_layout.addStretch()
        layout.addLayout(top_layout)

        # Alt satƒ±r: Model bilgisi
        model_label = QLabel(f"Model: {model_info}")
        model_label.setStyleSheet("""
            QLabel {
                color: rgba(255, 255, 255, 0.8);
                font-size: 11px;
                font-family: 'JetBrains Mono', monospace;
            }
        """)
        layout.addWidget(model_label)

        # Not alma b√∂l√ºm√º
        notes_layout = QHBoxLayout()

        # Not etiketi
        notes_label = QLabel("üìù Not:")
        notes_label.setStyleSheet("""
            QLabel {
                color: rgba(255, 255, 255, 0.8);
                font-size: 10px;
                font-weight: bold;
            }
        """)
        notes_layout.addWidget(notes_label)

        # Not text box'ƒ±
        notes_text = QtWidgets.QLineEdit()
        notes_text.setPlaceholderText("Bu cihaz i√ßin not ekleyin...")
        notes_text.setStyleSheet("""
            QLineEdit {
                background-color: rgba(255, 255, 255, 0.9);
                color: #333;
                border: 1px solid #ccc;
                border-radius: 4px;
                padding: 4px 8px;
                font-size: 10px;
                font-family: 'JetBrains Mono', monospace;
            }
            QLineEdit:focus {
                border: 1px solid #094771;
                background-color: white;
            }
        """)

        # Mevcut notu y√ºkle
        if serial in self.device_notes:
            notes_text.setText(self.device_notes[serial])

        # Text deƒüi≈ütiƒüinde notu kaydet
        notes_text.textChanged.connect(lambda text, s=serial: self.save_note(s, text))

        notes_layout.addWidget(notes_text)
        layout.addLayout(notes_layout)

        return item_frame

    def export_to_csv(self):
        """Ge√ßmi≈ü verilerini CSV olarak dƒ±≈üa aktar - Kullanƒ±cƒ± konum se√ßsin"""
        try:
            if not self.history_data:
                show_simple_message("UYARI", "Dƒ±≈üa aktarƒ±lacak veri bulunmuyor.", "blue")
                return

            # Kullanƒ±cƒ±dan dosya konumunu se√ßmesini iste
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            default_filename = f"warranty_history_{timestamp}.csv"

            # QFileDialog ile dosya kaydetme dialog'u
            filename, _ = QtWidgets.QFileDialog.getSaveFileName(
                self,
                "CSV Dosyasƒ±nƒ± Kaydet",
                default_filename,
                "CSV Dosyalarƒ± (*.csv);;T√ºm Dosyalar (*)"
            )

            # Kullanƒ±cƒ± vazge√ßtiyse √ßƒ±k
            if not filename:
                return

            # CSV dosyasƒ±nƒ± yaz
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['serial', 'model', 'color', 'timestamp']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

                # Ba≈ülƒ±klarƒ± yaz
                writer.writerow({
                    'serial': 'Seri Numarasƒ±',
                    'model': 'Model',
                    'color': 'Durum',
                    'timestamp': 'Zaman'
                })

                # Verileri yaz
                for row in self.history_data:
                    writer.writerow(row)

            log_info(f"CSV dƒ±≈üa aktarƒ±ldƒ±: {filename}")

            # Ba≈üarƒ±lƒ± mesajƒ± g√∂ster
            show_simple_message("BA≈ûARILI", f"Veriler '{os.path.basename(filename)}' dosyasƒ±na kaydedildi.", "green")

        except Exception as e:
            log_exc(f"CSV export error: {e}")

            # Hata mesajƒ± g√∂ster
            show_simple_message("HATA", "CSV dƒ±≈üa aktarma sƒ±rasƒ±nda hata olu≈ütu.", "red")

    def show_at_center(self):
        """Popup'u ekranƒ±n merkezinde g√∂ster - G√ºvenli y√∂ntem"""
        try:
            log_info("=== SHOW_AT_CENTER METODU BA≈ûLATILDI ===")

            # Basit ve g√ºvenli pozisyon hesaplama
            log_info("Pozisyon hesaplanƒ±yor...")
            screen_geometry = QtCore.QRect(0, 0, 1920, 1080)  # Varsayƒ±lan ekran boyutu
            w = self.width()
            h = self.height()

            # Ekranƒ±n ortasƒ±na yerle≈ütir
            x = (screen_geometry.width() - w) // 2
            y = (screen_geometry.height() - h) // 2

            log_info(f"Popup boyutlarƒ± - Width: {w}, Height: {h}")
            log_info(f"Hesaplanan pozisyon - X: {x}, Y: {y}")

            # Pozisyonu ayarla
            self.move(x, y)
            log_info("Pozisyon ayarlandƒ±")

            # Pencereyi g√∂ster
            self.show()
            log_info("Pencere g√∂sterildi")

            # Timer'ƒ± ba≈ülat (daha sonra)
            try:
                self.autoclose_timer.start()
                log_info("Timer ba≈ülatƒ±ldƒ±")
            except:
                log_info("Timer ba≈ülatƒ±lamadƒ± (normal)")

            log_info("=== SHOW_AT_CENTER METODU BA≈ûARIYLA TAMAMLANDI ===")
            return True

        except Exception as e:
            log_exc(f"=== SHOW_AT_CENTER METODU HATASI ===")
            log_exc(f"Hata detayƒ±: {str(e)}")
            log_exc(f"Hata t√ºr√º: {type(e).__name__}")

            # Hata durumunda pencereyi gizle
            try:
                self.hide()
            except:
                pass

            return False

    def load_notes(self):
        """Cihaz notlarƒ±nƒ± y√ºkle"""
        try:
            if os.path.exists(self.notes_file):
                with open(self.notes_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except:
            pass
        return {}

    def save_note(self, serial, note_text):
        """Tek bir cihaz notunu kaydet"""
        try:
            # Notu g√ºncelle
            if note_text.strip():
                self.device_notes[serial] = note_text.strip()
            else:
                # Bo≈ü not ise sil
                if serial in self.device_notes:
                    del self.device_notes[serial]

            # T√ºm notlarƒ± kaydet
            self.save_notes()

        except Exception as e:
            log_exc(f"Save note error: {e}")

    def save_notes(self):
        """Cihaz notlarƒ±nƒ± kaydet"""
        try:
            with open(self.notes_file, 'w', encoding='utf-8') as f:
                json.dump(self.device_notes, f, ensure_ascii=False, indent=2)
        except Exception as e:
            log_exc(f"Notes save error: {e}")

    def filter_devices(self, filter_type):
        """Cihazlarƒ± filtrele"""
        try:
            # Mevcut √∂ƒüeleri gizle/g√∂ster
            for item_info in self.all_items:
                widget = item_info['widget']
                serial = item_info['serial']

                if filter_type == "all":
                    widget.show()
                elif filter_type == "notes":
                    # Notu olanlarƒ± g√∂ster
                    if serial in self.device_notes and self.device_notes[serial].strip():
                        widget.show()
                    else:
                        widget.hide()

        except Exception as e:
            log_exc(f"Filter error: {e}")

    def close_popup(self):
        """Popup'u kapat"""
        try:
            self.hide()
            self.autoclose_timer.stop()
        except Exception as e:
            log_exc(f"History popup close error: {e}")


# Basit mesaj g√∂sterme fonksiyonu
def show_simple_message(title: str, message: str, status_color: str = "blue"):
    """Basit mesaj popup'ƒ± g√∂ster"""
    try:
        # Basit bir message box g√∂ster
        msg_box = QtWidgets.QMessageBox()
        msg_box.setWindowTitle(title)
        msg_box.setText(message)

        if status_color == "green":
            msg_box.setIcon(QtWidgets.QMessageBox.Icon.Information)
        elif status_color == "red":
            msg_box.setIcon(QtWidgets.QMessageBox.Icon.Critical)
        else:
            msg_box.setIcon(QtWidgets.QMessageBox.Icon.Information)

        msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
        msg_box.exec()

    except Exception as e:
        log_exc(f"Simple message error: {e}")
